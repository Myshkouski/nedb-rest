module.exports=function(e){var t={};function a(s){if(t[s])return t[s].exports;var r=t[s]={i:s,l:!1,exports:{}};return e[s].call(r.exports,r,r.exports,a),r.l=!0,r.exports}return a.m=e,a.c=t,a.d=function(e,t,s){a.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:s})},a.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},a.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return a.d(t,"a",t),t},a.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},a.p="",a.w={},a(a.s=9)}([function(e,t){e.exports=require("http-errors")},function(e,t){e.exports={vm:"dist/vm.js",var:"var/"}},function(e,t){e.exports=require("nedb-promise")},function(e,t){e.exports=require("async")},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("path")},function(e,t){e.exports=require("koa-bodyparser")},function(e,t){e.exports=require("koa-router")},function(e,t){e.exports=require("koa")},function(e,t,a){"use strict";a.r(t);var s=a(8),r=a.n(s),n=a(7),o=a.n(n),i=a(6),d=a.n(i),u=a(5),c=a.n(u),p=a(4),l=a.n(p),m=a(3),f=a.n(m),y=a(2),h=a.n(y),w=a(0),b=a.n(w),g=a(1),x=a.n(g);const v=new Map,q=e=>c.a.resolve(x.a.var,`${e}.db`),j=(e,t)=>{if("string"!=typeof e)throw new b.a(400,"Database name should be a string");if(!e.length||e.length>32)throw new b.a(400,"Database name length should contain 1-32 characters");if(v.has(e))throw new b.a(400,"Database name already exists");const a=new h.a({autoload:!0,filename:t?void 0:q(e)});return v.set(e,a),a};!async function(){try{const e=await j("_index",!1),t=await e.find({});f.a.forEach(t,async({name:e,temp:t})=>{await j(e,t)})}catch(e){console.error(e),process.exit(1)}}();const _=()=>v.get("_index"),k=new o.a,A=["application/vnd.api+json"],D=["application/json"],O=e=>"development"==e.app.env,P=e=>[...A,...O(e)?D:[]],M=e=>e.filter(e=>!!e).join(",");k.use(async(e,t)=>{try{await t()}catch(t){const a=O(e);e.status=500,e.body={errors:[{status:500,title:"JSON API error",details:a?t.message:void 0}]}}}).use(async(e,t)=>{const a=O(e),s=P(e);try{if(e.assert(e.request.accepts(s),406),e.request.rawBody&&e.request.rawBody.length&&e.assert(e.request.is(...s),415,{headers:{accept:M(s)}}),e.state.errors=[],await t(),Array.isArray(e.state.errors)&&e.state.errors.length)throw e.state.errors}catch(t){const s=(Array.isArray(t)?t:[t]).map(({id:e,statusCode:t,expose:s,message:r,detail:n,stack:o,headers:i})=>({id:e,status:t,title:s?r:void 0,detail:n,meta:a||i?{headers:i,stack:a?o:void 0}:void 0})),r=s[0];if(s.length>1)r.status>=500?e.status=500:r.status>=400&&(e.status=400);else if("meta"in r&&"headers"in r.meta)for(let t in r.meta.headers)e.set(t,r.meta.headers[t]);e.body={errors:s}}finally{e.type=s[0]}}).use(d()({strict:!0,enableTypes:["json"],extendTypes:{json:[...A]},onerror(e,t){t.throw(415,{headers:{accept:M(P(t))}})}})).get("/",async e=>{const t=await _().find({});e.body={included:t.map(({name:t})=>({type:"database",attributes:{name:t},links:{self:e.router.url("db",{name:t})}}))}}).get("db","/:name",async e=>{e.assert((e=>v.has(e))(e.params.name),404);const t=await _().findOne({name:e.params.name});e.body={data:(({name:e,temp:t,created:a})=>({name:e,temp:t,created:a}))(t)}}).post("/:name/:method",async e=>{e.assert("data"in e.request.body,400,"Field 'data' should be provided in body"),e.assert(Array.isArray(e.request.body.data),400,"Field 'data' should be an array of arguments passed to Nedb instance method"),e.assert(!!e.request.body.data.length,400,"No arguments provided in 'data' field");const t=(e=>v.get(e))(e.params.name);e.assert("function"==typeof t[e.params.method],400,`Unknown Nedb instance method: '${e.params.method}'`);const a=await t[e.params.method](...e.request.body.data);e.body={data:a}}).post("/",async e=>{await(async(e,t)=>{if("_index"==e)throw new b.a(400,"Could not use reserved database name");const a=j(e,t);return await v.get("_index").insert({name:e,temp:!!t,created:Date.now()}),a})(e.request.body.name,e.request.body.temp),e.status=201}).delete("/:name",async e=>{await(async e=>{if("string"!=typeof e||!e.length)throw new b.a(400,"Database name should be a string");if(!v.has(e))throw new b.a(404,"Database does not exist");await v.get("_index").remove({name:e}),await new Promise((t,a)=>{l.a.unlink(q(e),(e,s)=>e?a(e):t(s))}),v.delete(e)})(e.params.name),e.status=204});var N=k;const B=new r.a;B.use(N.routes()),B.use(N.allowedMethods());B.listen(27001,"0.0.0.0",()=>{console.log("Listening on 0.0.0.0:27001")});t.default=B}]);
//# sourceMappingURL=index.js.map