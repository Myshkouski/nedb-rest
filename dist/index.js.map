{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///external \"http-errors\"","webpack:///./.rootrc","webpack:///external \"nedb-promise\"","webpack:///external \"async\"","webpack:///external \"fs\"","webpack:///external \"path\"","webpack:///external \"koa-bodyparser\"","webpack:///external \"koa-router\"","webpack:///external \"koa\"","webpack:///./src/services/dbs.js","webpack:///./src/routers/dbRouter.js","webpack:///./src/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","w","s","require","vm","var","dbs","Map","createPath","external_path_default","a","resolve","_rootrc_default","createDb","temp","external_http_errors_default","length","has","db","external_nedb_promise_default","autoload","filename","undefined","set","indexDb","dbNames","find","external_async_default","forEach","async","error","console","process","exit","index","router","external_koa_router_default","JSON_API_MEDIA_TYPES","JSON_API_MEDIA_TYPES_DEV","isDevContext","ctx","app","env","defineApiMediaTypes","stringifyApiMediaTypes","arrayOfTypes","filter","type","join","use","next","isDev","status","body","errors","title","details","message","contentTypes","assert","request","accepts","rawBody","is","headers","accept","state","Array","isArray","errorOrErrors","map","id","statusCode","expose","detail","stack","meta","initialError","key","external_koa_bodyparser_default","strict","enableTypes","extendTypes","json","onerror","throw","list","included","attributes","links","self","url","params","findOne","data","created","mapDbKeys","post","method","insert","Date","now","create","delete","remove","Promise","reject","external_fs_default","unlink","err","dbRouter","external_koa_default","routes","allowedMethods","listen","log","__webpack_exports__"],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","module.exports = require(\"http-errors\");","module.exports = {\"vm\":\"dist/vm.js\",\"var\":\"var/\"}","module.exports = require(\"nedb-promise\");","module.exports = require(\"async\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","module.exports = require(\"koa-bodyparser\");","module.exports = require(\"koa-router\");","module.exports = require(\"koa\");","import path from 'path'\r\nimport fs from 'fs'\r\nimport async from 'async'\r\nimport Nedb from 'nedb-promise'\r\nimport Error from 'http-errors'\r\n\r\nimport paths from '~paths'\r\n\r\nconst MAX_NAME_LENGTH = 32\r\nconst INDEX_DB_NAME = '_index'\r\nconst dbs = new Map()\r\n\r\nconst createPath = name => path.resolve(paths.var, `${ name }.db`)\r\n\r\nconst createDb = (name, temp) => {\r\n  if(typeof name != 'string') {\r\n    throw new Error(400, 'Database name should be a string')\r\n  }\r\n\r\n  if(!name.length || name.length > MAX_NAME_LENGTH) {\r\n    throw new Error(400, `Database name length should contain 1-${ MAX_NAME_LENGTH } characters`)\r\n  }\r\n\r\n  if(dbs.has(name)) {\r\n    throw new Error(400, 'Database name already exists')\r\n  }\r\n\r\n  const db = new Nedb({\r\n    autoload: true,\r\n    filename: temp ? undefined : createPath(name)\r\n  })\r\n\r\n  dbs.set(name, db)\r\n\r\n  return db\r\n}\r\n\r\n(async function init() {\r\n  try {\r\n    const indexDb = await createDb(INDEX_DB_NAME, false)\r\n\r\n    const dbNames = await indexDb.find({})\r\n\r\n    async.forEach(dbNames, async ({ name, temp }) => {\r\n      await createDb(name, temp)\r\n    })\r\n  } catch(error) {\r\n    console.error(error)\r\n    process.exit(1)\r\n  }\r\n})()\r\n\r\nexport const create = async (name, temp) => {\r\n  if(name == INDEX_DB_NAME) {\r\n    throw new Error(400, 'Could not use reserved database name')\r\n  }\r\n\r\n  const db = createDb(name, temp)\r\n\r\n  await dbs.get(INDEX_DB_NAME).insert({\r\n    name,\r\n    temp: !!temp,\r\n    created: Date.now()\r\n  })\r\n\r\n  return db\r\n}\r\n\r\nexport const remove = async name => {\r\n  if(typeof name != 'string' || !name.length) {\r\n    throw new Error(400, 'Database name should be a string')\r\n  }\r\n\r\n  if(!dbs.has(name)) {\r\n    throw new Error(404, 'Database does not exist')\r\n  }\r\n\r\n  await dbs.get(INDEX_DB_NAME).remove({ name })\r\n\r\n  await new Promise((resolve, reject) => {\r\n    fs.unlink(createPath(name), (err, data) => err ? reject(err) : resolve(data))\r\n  })\r\n\r\n  dbs.delete(name)\r\n}\r\n\r\nexport const index = () => dbs.get(INDEX_DB_NAME)\r\n\r\nexport const get = name => dbs.get(name)\r\nexport const has = name => dbs.has(name)\r\n","import Router from 'koa-router'\r\nimport bodyParser from 'koa-bodyparser'\r\n\r\nimport * as dbs from '~/services/dbs'\r\n\r\nconst router = new Router()\r\n\r\nconst mapDbKeys = ({\r\n  name,\r\n  temp,\r\n  created\r\n}) => ({\r\n  name,\r\n  temp,\r\n  created\r\n})\r\n\r\nconst JSON_API_MEDIA_TYPES = ['application/vnd.api+json']\r\nconst JSON_API_MEDIA_TYPES_DEV = ['application/json']\r\n\r\nconst isDevContext = ctx => ctx.app.env == 'development'\r\nconst defineApiMediaTypes = ctx => [...JSON_API_MEDIA_TYPES, ...(isDevContext(ctx) ? JSON_API_MEDIA_TYPES_DEV : [])]\r\nconst stringifyApiMediaTypes = arrayOfTypes => arrayOfTypes.filter(type => !!type).join(',')\r\n\r\nrouter\r\n  .use(async (ctx, next) => {\r\n    try {\r\n      await next()\r\n    } catch(error) {\r\n      const isDev = isDevContext(ctx)\r\n      ctx.status = 500\r\n      ctx.body = {\r\n        errors: [\r\n          {\r\n            status: 500,\r\n            title: 'JSON API error',\r\n            details: isDev ? error.message : undefined\r\n          }\r\n        ]\r\n      }\r\n    }\r\n  })\r\n  .use(async (ctx, next) => {\r\n    const isDev = isDevContext(ctx)\r\n    const contentTypes = defineApiMediaTypes(ctx)\r\n\r\n    try {\r\n      ctx.assert(ctx.request.accepts(contentTypes), 406)\r\n      if (ctx.request.rawBody && ctx.request.rawBody.length) {\r\n        ctx.assert(ctx.request.is(...contentTypes), 415, {\r\n          headers: {\r\n            accept: stringifyApiMediaTypes(contentTypes)\r\n          }\r\n        })\r\n      }\r\n\r\n      ctx.state.errors = []\r\n\r\n      await next()\r\n\r\n      if (Array.isArray(ctx.state.errors) && ctx.state.errors.length) {\r\n        throw ctx.state.errors\r\n      }\r\n    } catch (errorOrErrors) {\r\n      const errors = (Array.isArray(errorOrErrors) ? errorOrErrors : [errorOrErrors]).map(({\r\n        id,\r\n        statusCode: status,\r\n        expose,\r\n        message,\r\n        detail,\r\n        stack,\r\n        headers\r\n      }) => ({\r\n        id,\r\n        status,\r\n        title: expose ? message : undefined,\r\n        detail,\r\n        meta: (isDev || headers) ? {\r\n          headers,\r\n          stack: isDev ? stack : undefined,\r\n        } : undefined\r\n      }))\r\n\r\n      const initialError = errors[0]\r\n\r\n      if (errors.length > 1) {\r\n        if (initialError.status >= 500) {\r\n          ctx.status = 500\r\n        } else if (initialError.status >= 400) {\r\n          ctx.status = 400\r\n        }\r\n      } else {\r\n        if ('meta' in initialError && 'headers' in initialError.meta) {\r\n          for (let key in initialError.meta.headers) {\r\n            ctx.set(key, initialError.meta.headers[key])\r\n          }\r\n        }\r\n      }\r\n\r\n      ctx.body = {\r\n        errors\r\n      }\r\n    } finally {\r\n      ctx.type = contentTypes[0]\r\n    }\r\n  })\r\n  .use(bodyParser({\r\n    strict: true,\r\n    enableTypes: ['json'],\r\n    extendTypes: {\r\n      json: [...JSON_API_MEDIA_TYPES]\r\n    },\r\n    onerror(error, ctx) {\r\n      ctx.throw(415, {\r\n        headers: {\r\n          accept: stringifyApiMediaTypes(defineApiMediaTypes(ctx))\r\n        }\r\n      })\r\n    }\r\n  }))\r\n  .get('/', async ctx => {\r\n    const list = await dbs.index().find({})\r\n\r\n    ctx.body = {\r\n      included: list.map(({\r\n        name\r\n      }) => ({\r\n        type: 'database',\r\n        attributes: {\r\n          name\r\n        },\r\n        links: {\r\n          self: ctx.router.url('db', {\r\n            name\r\n          })\r\n        }\r\n      }))\r\n    }\r\n  })\r\n  .get('db', '/:name', async ctx => {\r\n    ctx.assert(dbs.has(ctx.params.name), 404)\r\n\r\n    const db = await dbs.index().findOne({\r\n      name: ctx.params.name\r\n    })\r\n\r\n    ctx.body = {\r\n      data: mapDbKeys(db)\r\n    }\r\n  })\r\n  .post('/:name/:method', async ctx => {\r\n    ctx.assert('data' in ctx.request.body, 400, `Field 'data' should be provided in body`)\r\n    ctx.assert(Array.isArray(ctx.request.body.data), 400, `Field 'data' should be an array of arguments passed to Nedb instance method`)\r\n    ctx.assert(!!ctx.request.body.data.length, 400, `No arguments provided in 'data' field`)\r\n\r\n    const db = dbs.get(ctx.params.name)\r\n\r\n    ctx.assert(typeof db[ctx.params.method] == 'function', 400, `Unknown Nedb instance method: '${ ctx.params.method }'`)\r\n\r\n    const data = await db[ctx.params.method](...ctx.request.body.data)\r\n\r\n    ctx.body = {\r\n      data\r\n    }\r\n  })\r\n  .post('/', async ctx => {\r\n    await dbs.create(ctx.request.body.name, ctx.request.body.temp)\r\n\r\n    ctx.status = 201\r\n  })\r\n  .delete('/:name', async ctx => {\r\n    await dbs.remove(ctx.params.name)\r\n\r\n    ctx.status = 204\r\n  })\r\n\r\nexport default router\r\n","import Koa from 'koa'\r\n\r\nimport dbRouter from '~/routers/dbRouter'\r\n\r\nconst app = new Koa()\r\n\r\napp.use(dbRouter.routes())\r\napp.use(dbRouter.allowedMethods())\r\n\r\nconst PORT = 27001\r\nconst HOST = '0.0.0.0'\r\n\r\napp.listen(PORT, HOST, () => {\r\n  console.log(`Listening on ${ HOST }:${ PORT }`)\r\n})\r\n\r\nexport default app\r\n"],"sourceRoot":""}